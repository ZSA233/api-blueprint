// Code generated by api-gen-golang; DO NOT EDIT.

package {{ writer.provider_package }}

{% set ns = namespace(imports=['"net/http"']) %}

{% set gen_proto_block %}
{% set fmts = writer.formatters() %}

// ============================= JSON ================================
{% set rsp_json_wrappers = writer.response_wrappers('RSP_JSON') | list %}
{% for wrapper in rsp_json_wrappers %}
	{% set proto = wrapper.proto %}
	{% if wrapper.proto_type == 'struct' %}
	type {{ wrapper.proto_def_name }} struct {
		{% for field in wrapper.proto_fields() %}{{ field.name }} {{ field.type.format(**fmts) | safe }} `{{ field.tags | safe }}`
		{% endfor %}
	}
	{% elif wrapper.proto_type == 'generic' %}
	type {{ wrapper.proto_def_name }} = {% if proto.generic.parent %}{{ proto.generic.format_package_with_dot(**fmts) }}{% endif %}{{ proto.generic.name }}[
		{% for typ in proto.generics() %}{{ typ | safe}},
		{% endfor %}
	]
	{% elif wrapper.proto_type == 'alias' %}
	type {{ wrapper.proto_def_name }} {% if not proto.alias.new_type %}={% endif %} {% 
		if proto.alias.parent %}{{ proto.alias.format_package_with_dot(**fmts) | safe }}{% endif %}{{
			proto.alias.name | safe 
		}}
	{% endif %}
{% endfor %}


{% for wrapper in rsp_json_wrappers %}
	{% set proto = wrapper.proto %}
	func NewRSP_JSON_{{ wrapper.class_name }}[Q, F, J, P any](prov *RspProvider[Q, F, J, P], data *P, err error) (codeInt int, rsp any) {
		code, message := unwrapError(err)
		_, _ = code, message
		{{ 
			wrapper.json_factory(
				wrapper_name=wrapper.proto_name,
				generic_types='[P]',
				code='code', 
				data='data', 
				message='message',
			) | safe
		}}
	}
{% endfor %}


func NewRSP_JSON_Entry[Q, F, J, P any](prov *RspProvider[Q, F, J, P], data *P, err error) (code int, rsp any) {
	switch prov.Options {
	{% for wrapper in rsp_json_wrappers %}
	case "{{ wrapper.class_name }}":
		code, rsp = NewRSP_JSON_{{ wrapper.class_name }}(prov, data, err){% endfor %}
	default:
		panic("[NewRS_JSON] should unreachable.")
	}
	return
}


// ============================= XML ================================

type RSP_XML[P any] struct {
	XMLName xml.Name
	Inner   *P
}

{% set rsp_xml_wrappers = writer.response_wrappers('RSP_XML') | list %}
{% if rsp_xml_wrappers | length > 0 %}{% set ns.imports = ns.imports + ['"encoding/xml"'] %}{% endif %}
{% for wrapper in rsp_xml_wrappers %}
	{% set proto = wrapper.proto %}
	{% if wrapper.proto_type == 'struct' %}
	type {{ wrapper.proto_name }}_INNER{{ wrapper.generic_types(True) }} struct {
		{% for field in wrapper.proto_fields() %}{{ field.name }} {{ field.type.format(**fmts) | safe }} `{{ field.tags | safe }}`
		{% endfor %}
	}
	{% elif wrapper.proto_type == 'generic' %}
	type {{ wrapper.proto_name }}_INNER{{ wrapper.generic_types(True) }} = {% if proto.generic.parent %}{{ proto.generic.format_package_with_dot(**fmts) }}{% endif %}{{ proto.generic.name }}[
		{% for typ in proto.generics() %}{{ typ | safe}},
		{% endfor %}
	]
	{% elif wrapper.proto_type == 'alias' %}
	type {{ wrapper.proto_name }}_INNER{{ wrapper.generic_types(True) }} {% if not proto.alias.new_type %}={% endif %} {% 
		if proto.alias.parent %}{{ proto.alias.format_package_with_dot(**fmts) | safe }}{% endif %}{{
			proto.alias.name | safe 
		}}
	{% endif %}

	type {{ wrapper.proto_def_name }} RSP_XML[{{ wrapper.proto_name }}_INNER{{ wrapper.generic_types() }}]

	func (r {{ wrapper.proto_name ~ wrapper.generic_types() }}) MarshalXML(enc *xml.Encoder, start xml.StartElement) error {
		return marshalXML(enc, start, r.XMLName, r.Inner)
	}
{% endfor %}


{% for wrapper in rsp_xml_wrappers %}
	func NewRSP_XML_{{ wrapper.class_name }}[Q, F, J, P any](prov *RspProvider[Q, F, J, P], data *P, err error) (codeInt int, rsp any) {
		code, message := unwrapError(err)
		_, _ = code, message
		{{ 
			wrapper.xml_factory(
				wrapper_name=wrapper.proto_name,
				generic_types='[P]',
				code='code', 
				data='data', 
				message='message',
			) | safe
		}}
	}
{% endfor %}

func NewRSP_XML_Entry[Q, F, J, P any](prov *RspProvider[Q, F, J, P], data *P, err error) (code int, rsp any) {
	switch prov.Options {
	{% for wrapper in rsp_xml_wrappers %}
	case "{{ wrapper.class_name }}":
		code, rsp = NewRSP_XML_{{ wrapper.class_name }}(prov, data, err){% endfor %}
	default:
		panic("[NewRSP_XML] should unreachable.")
	}
	return
}

{% endset %}



import (
	{% for imp in ns.imports | unique | list %}{{ imp | safe }}
	{% endfor %}
)

var (
	_ = http.StatusBadRequest
)


type REQ[Q, F, J any] struct {
	Q *Q
	J *J
	F *F
}


{{ gen_proto_block }}

