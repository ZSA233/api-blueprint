// Code generated by api-gen-golang; DO NOT EDIT.

package {{ bp.package }}

{% set protos_list = bp.com_protos() | list %}
{% set fmts = bp.formatters({
	'protos_package': '',
	'protos_package$': '',
	'protos_imports': '',
}) %}


{% set ns = namespace(imports=[]) %}

{% set gen_proto_block %}
{% for proto in protos_list %}
{% if proto.struct_type == 'struct' %}
type {{ proto.def_name }} struct {
	{% for field in proto.fields() %}{{ field.name }} {{ field.type.format(**fmts) | safe }} `{{ field.tags | safe }}`
	{% endfor %}
}
{% elif proto.struct_type == 'generic' %}
{% if proto.generic and proto.generic.parent %}
{% set ns.imports = ns.imports + ['{package} "{imports}"'.format(package=proto.generic.package, imports=proto.generic.imports)] %}
{% endif %}
type {{ proto.def_name }} = {% if proto.generic.parent %}{{ proto.generic.format_package_with_dot(**fmts) }}{% endif %}{{ proto.generic.name }}[
	{% for typ in proto.generics() %}{{ typ | safe}},
	{% endfor %}
]
{% elif proto.struct_type == 'alias' %}
{% if proto.alias.parent %}
{% set ns.imports = ns.imports + ['{package} "{imports}"'.format(package=proto.alias.package, imports=proto.alias.imports)] %}
{% endif %}
type {{ proto.def_name }} {% if not proto.alias.new_type %}={% endif %} {% 
	if proto.alias.parent %}{{ proto.alias.format_package_with_dot(**fmts) | safe }}{% endif %}{{
		proto.alias.name | safe 
	}}
{% endif %}
{% endfor %}
{% endset %}


import (
	{% for imp in ns.imports | unique | list %}{% if imp not in (' ""', '') %}
	{{ imp.format(**fmts) | safe }}{% endif %}
	{% endfor %}
)


{{ gen_proto_block }}