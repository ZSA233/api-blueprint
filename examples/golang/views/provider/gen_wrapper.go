// Code generated by api-gen-golang; DO NOT EDIT.

package provider

import (
	"encoding/xml"
	"net/http"
)

var (
	_ = http.StatusBadRequest
)

type REQ[Q, F, J any] struct {
	Q *Q
	J *J
	F *F
}

// ============================= JSON ================================

type RSP_JSON_GeneralWrapper[A any] struct {
	Code    int    `json:"code" xml:"code" form:"code" binding:"required"`
	Data    *A     `json:"data,omitempty" xml:"data,omitempty" form:"data,omitempty" binding:"required"`
	Message string `json:"message,omitempty" xml:"message,omitempty" form:"message,omitempty" binding:"required"`
}

type RSP_JSON_NoneWrapper = any

func NewRSP_JSON_GeneralWrapper[Q, F, J, P any](prov *RspProvider[Q, F, J, P], data *P, err error) (codeInt int, rsp any) {
	code, message := unwrapError(err)
	_, _ = code, message

	return 0, &RSP_JSON_GeneralWrapper[P]{
		Code:    code,
		Message: message,
		Data:    data,
	}
}

func NewRSP_JSON_NoneWrapper[Q, F, J, P any](prov *RspProvider[Q, F, J, P], data *P, err error) (codeInt int, rsp any) {
	code, message := unwrapError(err)
	_, _ = code, message

	return int(code), (RSP_JSON_NoneWrapper)(data)
}

func NewRSP_JSON_Entry[Q, F, J, P any](prov *RspProvider[Q, F, J, P], data *P, err error) (code int, rsp any) {
	switch prov.Options {

	case "GeneralWrapper":
		code, rsp = NewRSP_JSON_GeneralWrapper(prov, data, err)
	case "NoneWrapper":
		code, rsp = NewRSP_JSON_NoneWrapper(prov, data, err)
	default:
		panic("[NewRS_JSON] should unreachable.")
	}
	return
}

// ============================= XML ================================

type RSP_XML[P any] struct {
	XMLName xml.Name
	Inner   *P
}

type RSP_XML_GeneralWrapper_INNER[A any] struct {
	Code    int    `json:"code" xml:"code" form:"code" binding:"required"`
	Data    *A     `json:"data,omitempty" xml:"data,omitempty" form:"data,omitempty" binding:"required"`
	Message string `json:"message,omitempty" xml:"message,omitempty" form:"message,omitempty" binding:"required"`
}

type RSP_XML_GeneralWrapper[A any] RSP_XML[RSP_XML_GeneralWrapper_INNER[A]]

func (r RSP_XML_GeneralWrapper[A]) MarshalXML(enc *xml.Encoder, start xml.StartElement) error {
	return marshalXML(enc, start, r.XMLName, r.Inner)
}

type RSP_XML_NoneWrapper_INNER = any

type RSP_XML_NoneWrapper RSP_XML[RSP_XML_NoneWrapper_INNER]

func (r RSP_XML_NoneWrapper) MarshalXML(enc *xml.Encoder, start xml.StartElement) error {
	return marshalXML(enc, start, r.XMLName, r.Inner)
}

func NewRSP_XML_GeneralWrapper[Q, F, J, P any](prov *RspProvider[Q, F, J, P], data *P, err error) (codeInt int, rsp any) {
	code, message := unwrapError(err)
	_, _ = code, message

	return int(code), &RSP_XML_GeneralWrapper[P]{
		XMLName: xml.Name{Local: "response"},
		Inner: &RSP_XML_GeneralWrapper_INNER[P]{
			Code:    code,
			Message: message,
			Data:    data,
		},
	}
}

func NewRSP_XML_NoneWrapper[Q, F, J, P any](prov *RspProvider[Q, F, J, P], data *P, err error) (codeInt int, rsp any) {
	code, message := unwrapError(err)
	_, _ = code, message

	inner := (RSP_XML_NoneWrapper_INNER)(data)
	return int(code), &RSP_XML_NoneWrapper{
		XMLName: xml.Name{Local: "NoneWrapper"},
		Inner:   &inner,
	}
}

func NewRSP_XML_Entry[Q, F, J, P any](prov *RspProvider[Q, F, J, P], data *P, err error) (code int, rsp any) {
	switch prov.Options {

	case "GeneralWrapper":
		code, rsp = NewRSP_XML_GeneralWrapper(prov, data, err)
	case "NoneWrapper":
		code, rsp = NewRSP_XML_NoneWrapper(prov, data, err)
	default:
		panic("[NewRSP_XML] should unreachable.")
	}
	return
}
